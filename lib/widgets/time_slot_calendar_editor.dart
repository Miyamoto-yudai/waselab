import 'package:flutter/material.dart';
import 'package:table_calendar/table_calendar.dart';
import 'package:intl/date_symbol_data_local.dart';
import '../models/date_time_slot.dart';

/// カレンダーベースの時間枠設定ウィジェット（日付ベースのみ）
class TimeSlotCalendarEditor extends StatefulWidget {
  final Map<DateTime, List<DateTimeSlot>> dateTimeSlots;
  final Function(Map<DateTime, List<DateTimeSlot>>) onChanged;
  final int defaultSimultaneousCapacity;
  final int? experimentDuration; // 実験の所要時間（分）

  const TimeSlotCalendarEditor({
    super.key,
    required this.dateTimeSlots,
    required this.onChanged,
    this.defaultSimultaneousCapacity = 1,
    this.experimentDuration,
  });

  @override
  State<TimeSlotCalendarEditor> createState() => _TimeSlotCalendarEditorState();
}

class _TimeSlotCalendarEditorState extends State<TimeSlotCalendarEditor> {
  late DateTime _focusedDay;
  DateTime? _selectedDay;
  late Map<DateTime, List<DateTimeSlot>> _dateTimeSlots;
  
  // 自動割り当てのデフォルト設定
  TimeOfDay _defaultStartTime = const TimeOfDay(hour: 9, minute: 0);
  TimeOfDay _defaultEndTime = const TimeOfDay(hour: 17, minute: 0);
  bool _includeLunchBreak = true;
  TimeOfDay _lunchStartTime = const TimeOfDay(hour: 12, minute: 0);
  TimeOfDay _lunchEndTime = const TimeOfDay(hour: 13, minute: 0);
  bool _excludeWeekends = true; // 土日を除外するかどうか

  @override
  void initState() {
    super.initState();
    initializeDateFormatting('ja_JP', null);
    _focusedDay = DateTime.now();
    _dateTimeSlots = Map.from(widget.dateTimeSlots);
  }

  /// 日付の時間枠を取得（日付のみで比較）
  List<DateTimeSlot> _getTimeSlotsForDay(DateTime day) {
    final dateKey = DateTime(day.year, day.month, day.day);
    return _dateTimeSlots[dateKey] ?? [];
  }

  /// 時間枠を追加
  Future<void> _addTimeSlotForDay(DateTime day) async {
    final result = await showDialog<DateTimeSlot>(
      context: context,
      builder: (context) => _TimeSlotAddDialog(
        date: day,
        defaultCapacity: widget.defaultSimultaneousCapacity,
      ),
    );

    if (result != null) {
      setState(() {
        final dateKey = DateTime(day.year, day.month, day.day);
        if (!_dateTimeSlots.containsKey(dateKey)) {
          _dateTimeSlots[dateKey] = [];
        }
        
        // 重複チェック：同じ時間帯の枠が既に存在するか確認
        final isDuplicate = _dateTimeSlots[dateKey]!.any((existing) =>
          existing.startTime == result.startTime && 
          existing.endTime == result.endTime
        );
        
        if (!isDuplicate) {
          _dateTimeSlots[dateKey]!.add(result);
          // 時間順にソート
          _dateTimeSlots[dateKey]!.sort((a, b) {
            final aMinutes = a.startTime.hour * 60 + a.startTime.minute;
            final bMinutes = b.startTime.hour * 60 + b.startTime.minute;
            return aMinutes.compareTo(bMinutes);
          });
        } else {
          // 重複している場合は警告を表示
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('同じ時間帯の枠は既に存在します'),
              backgroundColor: Colors.orange,
            ),
          );
        }
      });
      widget.onChanged(_dateTimeSlots);
    }
  }

  /// 時間枠を削除
  void _removeTimeSlot(DateTime day, DateTimeSlot slot) {
    setState(() {
      final dateKey = DateTime(day.year, day.month, day.day);
      _dateTimeSlots[dateKey]?.remove(slot);
      if (_dateTimeSlots[dateKey]?.isEmpty ?? false) {
        _dateTimeSlots.remove(dateKey);
      }
    });
    widget.onChanged(_dateTimeSlots);
  }

  /// 時間帯設定ダイアログを表示して自動割り当て（期間選択付き）
  Future<void> _showAutoGenerateDialog() async {
    final result = await showDialog<Map<String, dynamic>>(
      context: context,
      builder: (context) => _AutoGenerateDialog(
        experimentDuration: widget.experimentDuration ?? 60,
        defaultStartTime: _defaultStartTime,
        defaultEndTime: _defaultEndTime,
        includeLunchBreak: _includeLunchBreak,
        lunchStartTime: _lunchStartTime,
        lunchEndTime: _lunchEndTime,
        excludeWeekends: _excludeWeekends,
      ),
    );
    
    if (result != null) {
      setState(() {
        _defaultStartTime = result['startTime'];
        _defaultEndTime = result['endTime'];
        _includeLunchBreak = result['includeLunchBreak'];
        _lunchStartTime = result['lunchStartTime'];
        _lunchEndTime = result['lunchEndTime'];
        _excludeWeekends = result['excludeWeekends'] ?? true;
      });
      
      _autoGenerateTimeSlots(
        result['startDate'],
        result['endDate'],
        result['startTime'],
        result['endTime'],
        result['includeLunchBreak'],
        result['lunchStartTime'],
        result['lunchEndTime'],
        result['excludeWeekends'] ?? true,
      );
    }
  }
  
  /// 所要時間に基づいて自動的に時間枠を生成
  void _autoGenerateTimeSlots(
    DateTime startDate,
    DateTime endDate,
    TimeOfDay startTime,
    TimeOfDay endTime,
    bool includeLunchBreak,
    TimeOfDay lunchStartTime,
    TimeOfDay lunchEndTime,
    bool excludeWeekends,
  ) {
    if (widget.experimentDuration == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('実験の所要時間が設定されていません')),
      );
      return;
    }
    
    setState(() {
      // 所要時間 + 準備時間（10分）
      final slotDuration = widget.experimentDuration! + 10;
      
      // 時刻を分に変換
      final startMinutes = startTime.hour * 60 + startTime.minute;
      final endMinutes = endTime.hour * 60 + endTime.minute;
      final lunchStartMinutes = lunchStartTime.hour * 60 + lunchStartTime.minute;
      final lunchEndMinutes = lunchEndTime.hour * 60 + lunchEndTime.minute;
      
      // 期間内のすべての日付を処理
      DateTime current = DateTime(startDate.year, startDate.month, startDate.day);
      final end = DateTime(endDate.year, endDate.month, endDate.day);
      
      while (current.isBefore(end.add(const Duration(days: 1)))) {
        final dateKey = DateTime(current.year, current.month, current.day);
        
        // 土日を除外するかどうかチェック
        if (excludeWeekends && (current.weekday == 6 || current.weekday == 7)) {
          current = current.add(const Duration(days: 1));
          continue;
        }
        
        final slots = <DateTimeSlot>[];
        int currentMinutes = startMinutes;
        
        while (currentMinutes + slotDuration <= endMinutes) {
          final slotEndMinutes = currentMinutes + slotDuration;
          
          // 昼休みを考慮
          if (includeLunchBreak) {
            // 昼休み時間と重なる場合はスキップ
            if ((currentMinutes < lunchEndMinutes && slotEndMinutes > lunchStartMinutes)) {
              // 昼休み後から再開
              currentMinutes = lunchEndMinutes;
              continue;
            }
          }
          
          slots.add(DateTimeSlot(
            date: dateKey,
            startTime: TimeOfDay(hour: currentMinutes ~/ 60, minute: currentMinutes % 60),
            endTime: TimeOfDay(hour: slotEndMinutes ~/ 60, minute: slotEndMinutes % 60),
            maxCapacity: widget.defaultSimultaneousCapacity,
          ));
          
          currentMinutes = slotEndMinutes;
        }
        
        if (slots.isNotEmpty) {
          _dateTimeSlots[dateKey] = slots;
        }
        
        current = current.add(const Duration(days: 1));
      }
    });
    
    widget.onChanged(_dateTimeSlots);
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // 操作説明とテンプレート
        Card(
          margin: const EdgeInsets.only(bottom: 16),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // 操作説明
                Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      decoration: BoxDecoration(
                        color: Colors.green.withValues(alpha: 0.1),
                        borderRadius: BorderRadius.circular(20),
                        border: Border.all(color: Colors.green),
                      ),
                      child: const Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Icon(Icons.access_time, size: 16, color: Colors.green),
                          SizedBox(width: 4),
                          Text(
                            '時間枠を設定',
                            style: TextStyle(
                              fontSize: 12,
                              fontWeight: FontWeight.bold,
                              color: Colors.green,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
                
                const SizedBox(height: 12),
                
                // 自動割当ボタン
                if (widget.experimentDuration != null) ...[
                  const Text('テンプレート', style: TextStyle(fontSize: 12, color: Colors.grey)),
                  const SizedBox(height: 8),
                  Wrap(
                    spacing: 8,
                    runSpacing: 8,
                    children: [
                      ActionChip(
                        label: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            const Icon(Icons.settings, size: 14),
                            const SizedBox(width: 4),
                            Text('${widget.experimentDuration}分で期間を設定して自動割当'),
                          ],
                        ),
                        onPressed: _showAutoGenerateDialog,
                        backgroundColor: Colors.purple.withValues(alpha: 0.1),
                        labelStyle: const TextStyle(color: Colors.purple, fontSize: 12),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                ],
                
                Text(
                  '※ カレンダーで日付を選択して「＋」ボタンから時間枠を追加できます',
                  style: TextStyle(
                    fontSize: 11,
                    color: Colors.grey.shade600,
                    fontStyle: FontStyle.italic,
                  ),
                ),
              ],
            ),
          ),
        ),

        // カレンダー
        Card(
          child: TableCalendar<DateTimeSlot>(
            firstDay: DateTime.now().subtract(const Duration(days: 30)),
            lastDay: DateTime.now().add(const Duration(days: 365)),
            focusedDay: _focusedDay,
            calendarFormat: CalendarFormat.month,
            startingDayOfWeek: StartingDayOfWeek.sunday,
            locale: 'ja_JP',
            
            // 横フリックによるページ切り替えを無効化
            pageJumpingEnabled: false,
            availableGestures: AvailableGestures.none,
            
            selectedDayPredicate: (day) {
              return isSameDay(_selectedDay, day);
            },
            
            eventLoader: (day) {
              return _getTimeSlotsForDay(day);
            },
            
            calendarStyle: CalendarStyle(
              outsideDaysVisible: false,
              weekendTextStyle: const TextStyle(color: Colors.red),
              selectedDecoration: const BoxDecoration(
                color: Color(0xFF8E1728),
                shape: BoxShape.circle,
              ),
              todayDecoration: BoxDecoration(
                color: Colors.grey.withValues(alpha: 0.5),
                shape: BoxShape.circle,
              ),
              markerDecoration: const BoxDecoration(
                color: Colors.green,
                shape: BoxShape.circle,
              ),
              markersMaxCount: 3,
              markerSize: 6,
              markerMargin: const EdgeInsets.only(top: 8),
            ),
            
            headerStyle: const HeaderStyle(
              formatButtonVisible: false,
              titleCentered: true,
              leftChevronVisible: true,  // 左矢印ボタンは表示
              rightChevronVisible: true, // 右矢印ボタンは表示
              leftChevronIcon: Icon(Icons.chevron_left, color: Color(0xFF8E1728)),
              rightChevronIcon: Icon(Icons.chevron_right, color: Color(0xFF8E1728)),
            ),
            
            onDaySelected: (selectedDay, focusedDay) {
              setState(() {
                _selectedDay = selectedDay;
                _focusedDay = focusedDay;
              });
            },
            
            onPageChanged: (focusedDay) {
              _focusedDay = focusedDay;
            },
            
            calendarBuilders: CalendarBuilders(
              markerBuilder: (context, day, events) {
                if (events.isEmpty) return null;
                
                return Positioned(
                  bottom: 1,
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                    decoration: BoxDecoration(
                      color: Colors.green,
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: Text(
                      '${events.length}枠',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 10,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
        ),
        
        // 選択した日の時間枠一覧
        if (_selectedDay != null) ...[
          const SizedBox(height: 16),
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      const Icon(Icons.schedule, size: 20),
                      const SizedBox(width: 8),
                      Text(
                        '${_selectedDay!.year}/${_selectedDay!.month}/${_selectedDay!.day}の時間枠',
                        style: const TextStyle(fontWeight: FontWeight.bold),
                      ),
                      const Spacer(),
                      IconButton(
                        icon: const Icon(Icons.add_circle, color: Color(0xFF8E1728)),
                        onPressed: () => _addTimeSlotForDay(_selectedDay!),
                        tooltip: '時間枠を追加',
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  if (_getTimeSlotsForDay(_selectedDay!).isEmpty)
                    const Text(
                      'まだ時間枠が設定されていません',
                      style: TextStyle(color: Colors.grey),
                    )
                  else
                    ...(_getTimeSlotsForDay(_selectedDay!).asMap().entries.map((entry) {
                      final index = entry.key;
                      final slot = entry.value;
                      return ListTile(
                        key: ValueKey('${_selectedDay!.toIso8601String()}_${index}_${slot.timeRangeString}'),
                        leading: const Icon(Icons.access_time, size: 20),
                        title: Text(slot.timeRangeString),
                        subtitle: Text('定員: ${slot.maxCapacity}名'),
                        trailing: IconButton(
                          icon: const Icon(Icons.delete, color: Colors.red, size: 20),
                          onPressed: () => _removeTimeSlot(_selectedDay!, slot),
                        ),
                        contentPadding: EdgeInsets.zero,
                      );
                    })),
                ],
              ),
            ),
          ),
        ],
        
        // サマリー
        if (_dateTimeSlots.isNotEmpty) ...[
          const SizedBox(height: 16),
          Card(
            color: Colors.green.shade50,
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(Icons.check_circle, color: Colors.green.shade700, size: 20),
                      const SizedBox(width: 8),
                      Text(
                        '設定された時間枠',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: Colors.green.shade700,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '${_dateTimeSlots.length}日間に合計${_dateTimeSlots.values.fold(0, (sum, list) => sum + list.length)}枠',
                    style: TextStyle(color: Colors.green.shade700),
                  ),
                  Text(
                    '総定員: ${_dateTimeSlots.values.fold(0, (sum, list) => sum + list.fold(0, (s, slot) => s + slot.maxCapacity))}名',
                    style: TextStyle(color: Colors.green.shade700),
                  ),
                ],
              ),
            ),
          ),
        ],
      ],
    );
  }
}

/// 自動割当ダイアログ（期間選択付き）
class _AutoGenerateDialog extends StatefulWidget {
  final int experimentDuration;
  final TimeOfDay defaultStartTime;
  final TimeOfDay defaultEndTime;
  final bool includeLunchBreak;
  final TimeOfDay lunchStartTime;
  final TimeOfDay lunchEndTime;
  final bool excludeWeekends;

  const _AutoGenerateDialog({
    required this.experimentDuration,
    required this.defaultStartTime,
    required this.defaultEndTime,
    required this.includeLunchBreak,
    required this.lunchStartTime,
    required this.lunchEndTime,
    this.excludeWeekends = true,
  });

  @override
  State<_AutoGenerateDialog> createState() => _AutoGenerateDialogState();
}

class _AutoGenerateDialogState extends State<_AutoGenerateDialog> {
  late TimeOfDay _startTime;
  late TimeOfDay _endTime;
  late bool _includeLunchBreak;
  late TimeOfDay _lunchStartTime;
  late TimeOfDay _lunchEndTime;
  late bool _excludeWeekends;
  DateTime? _startDate;
  DateTime? _endDate;

  @override
  void initState() {
    super.initState();
    _startTime = widget.defaultStartTime;
    _endTime = widget.defaultEndTime;
    _includeLunchBreak = widget.includeLunchBreak;
    _lunchStartTime = widget.lunchStartTime;
    _lunchEndTime = widget.lunchEndTime;
    _excludeWeekends = widget.excludeWeekends;
  }

  Future<void> _selectTime(String type) async {
    TimeOfDay initialTime;
    switch (type) {
      case 'start':
        initialTime = _startTime;
        break;
      case 'end':
        initialTime = _endTime;
        break;
      case 'lunchStart':
        initialTime = _lunchStartTime;
        break;
      case 'lunchEnd':
        initialTime = _lunchEndTime;
        break;
      default:
        return;
    }

    final picked = await showTimePicker(
      context: context,
      initialTime: initialTime,
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: const ColorScheme.light(
              primary: Color(0xFF8E1728),
              onPrimary: Colors.white,
            ),
          ),
          child: child!,
        );
      },
    );

    if (picked != null) {
      setState(() {
        switch (type) {
          case 'start':
            _startTime = picked;
            break;
          case 'end':
            _endTime = picked;
            break;
          case 'lunchStart':
            _lunchStartTime = picked;
            break;
          case 'lunchEnd':
            _lunchEndTime = picked;
            break;
        }
      });
    }
  }

  Future<void> _selectDate(bool isStart) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: isStart 
        ? (_startDate ?? DateTime.now())
        : (_endDate ?? _startDate ?? DateTime.now()),
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: const ColorScheme.light(
              primary: Color(0xFF8E1728),
              onPrimary: Colors.white,
            ),
          ),
          child: child!,
        );
      },
    );

    if (picked != null) {
      setState(() {
        if (isStart) {
          _startDate = picked;
          if (_endDate != null && _endDate!.isBefore(_startDate!)) {
            _endDate = _startDate;
          }
        } else {
          _endDate = picked;
        }
      });
    }
  }

  String _formatTime(TimeOfDay time) {
    return '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}';
  }

  String _formatDate(DateTime? date) {
    if (date == null) return '未選択';
    return '${date.year}/${date.month.toString().padLeft(2, '0')}/${date.day.toString().padLeft(2, '0')}';
  }

  int _calculateSlotCount() {
    final startMinutes = _startTime.hour * 60 + _startTime.minute;
    final endMinutes = _endTime.hour * 60 + _endTime.minute;
    final lunchStartMinutes = _lunchStartTime.hour * 60 + _lunchStartTime.minute;
    final lunchEndMinutes = _lunchEndTime.hour * 60 + _lunchEndTime.minute;
    
    int totalMinutes = endMinutes - startMinutes;
    if (_includeLunchBreak) {
      totalMinutes -= (lunchEndMinutes - lunchStartMinutes);
    }
    
    final slotDuration = widget.experimentDuration + 10; // 準備時間10分
    return totalMinutes ~/ slotDuration;
  }

  @override
  Widget build(BuildContext context) {
    final slotCount = _calculateSlotCount();
    
    return AlertDialog(
      title: const Text('期間と時間帯を設定'),
      content: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.blue.shade50,
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                children: [
                  Icon(Icons.info_outline, color: Colors.blue.shade700, size: 20),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      '${widget.experimentDuration}分の実験 + 10分の準備時間で時間枠を作成します',
                      style: TextStyle(fontSize: 12, color: Colors.blue.shade700),
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 20),
            
            // 実施期間の設定
            const Text('実施期間', style: TextStyle(fontWeight: FontWeight.bold)),
            const SizedBox(height: 12),
            Row(
              children: [
                Expanded(
                  child: InkWell(
                    onTap: () => _selectDate(true),
                    child: InputDecorator(
                      decoration: const InputDecoration(
                        labelText: '開始日',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.calendar_today),
                      ),
                      child: Text(_formatDate(_startDate)),
                    ),
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: InkWell(
                    onTap: () => _selectDate(false),
                    child: InputDecorator(
                      decoration: const InputDecoration(
                        labelText: '終了日',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.calendar_today),
                      ),
                      child: Text(_formatDate(_endDate)),
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 20),
            
            const Text('実験時間帯', style: TextStyle(fontWeight: FontWeight.bold)),
            const SizedBox(height: 12),
            Row(
              children: [
                Expanded(
                  child: InkWell(
                    onTap: () => _selectTime('start'),
                    child: InputDecorator(
                      decoration: const InputDecoration(
                        labelText: '開始時刻',
                        border: OutlineInputBorder(),
                      ),
                      child: Text(_formatTime(_startTime)),
                    ),
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: InkWell(
                    onTap: () => _selectTime('end'),
                    child: InputDecorator(
                      decoration: const InputDecoration(
                        labelText: '終了時刻',
                        border: OutlineInputBorder(),
                      ),
                      child: Text(_formatTime(_endTime)),
                    ),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 20),
            SwitchListTile(
              title: const Text('土日を除外'),
              subtitle: const Text('土曜日と日曜日には時間枠を作成しません'),
              value: _excludeWeekends,
              onChanged: (value) {
                setState(() {
                  _excludeWeekends = value;
                });
              },
              contentPadding: EdgeInsets.zero,
            ),
            
            SwitchListTile(
              title: const Text('昼休みを設定'),
              subtitle: const Text('昼休み時間は時間枠を作成しません'),
              value: _includeLunchBreak,
              onChanged: (value) {
                setState(() {
                  _includeLunchBreak = value;
                });
              },
              contentPadding: EdgeInsets.zero,
            ),
            
            if (_includeLunchBreak) ...[
              const SizedBox(height: 12),
              Row(
                children: [
                  Expanded(
                    child: InkWell(
                      onTap: () => _selectTime('lunchStart'),
                      child: InputDecorator(
                        decoration: const InputDecoration(
                          labelText: '昼休み開始',
                          border: OutlineInputBorder(),
                        ),
                        child: Text(_formatTime(_lunchStartTime)),
                      ),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: InkWell(
                      onTap: () => _selectTime('lunchEnd'),
                      child: InputDecorator(
                        decoration: const InputDecoration(
                          labelText: '昼休み終了',
                          border: OutlineInputBorder(),
                        ),
                        child: Text(_formatTime(_lunchEndTime)),
                      ),
                    ),
                  ),
                ],
              ),
            ],
            
            const SizedBox(height: 20),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.green.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.green.shade200),
              ),
              child: Row(
                children: [
                  Icon(Icons.check_circle, color: Colors.green.shade700, size: 20),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      _startDate != null && _endDate != null 
                        ? '${_startDate!.difference(_endDate!).inDays.abs() + 1}日間に1日あたり約$slotCount枠が作成されます'
                        : '期間を選択してください',
                      style: TextStyle(
                        fontSize: 13,
                        fontWeight: FontWeight.bold,
                        color: Colors.green.shade700,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('キャンセル'),
        ),
        ElevatedButton(
          onPressed: () {
            // 期間が選択されているかチェック
            if (_startDate == null || _endDate == null) {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('実施期間を選択してください'),
                  backgroundColor: Colors.red,
                ),
              );
              return;
            }
            
            // 時間の妥当性チェック
            final startMinutes = _startTime.hour * 60 + _startTime.minute;
            final endMinutes = _endTime.hour * 60 + _endTime.minute;
            
            if (startMinutes >= endMinutes) {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('終了時刻は開始時刻より後に設定してください'),
                  backgroundColor: Colors.red,
                ),
              );
              return;
            }
            
            Navigator.pop(context, {
              'startTime': _startTime,
              'endTime': _endTime,
              'includeLunchBreak': _includeLunchBreak,
              'lunchStartTime': _lunchStartTime,
              'lunchEndTime': _lunchEndTime,
              'excludeWeekends': _excludeWeekends,
              'startDate': _startDate,
              'endDate': _endDate,
            });
          },
          style: ElevatedButton.styleFrom(
            backgroundColor: const Color(0xFF8E1728),
          ),
          child: const Text('適用'),
        ),
      ],
    );
  }
}

/// 時間枠追加ダイアログ
class _TimeSlotAddDialog extends StatefulWidget {
  final DateTime date;
  final int defaultCapacity;

  const _TimeSlotAddDialog({
    required this.date,
    required this.defaultCapacity,
  });

  @override
  State<_TimeSlotAddDialog> createState() => _TimeSlotAddDialogState();
}

class _TimeSlotAddDialogState extends State<_TimeSlotAddDialog> {
  TimeOfDay _startTime = const TimeOfDay(hour: 10, minute: 0);
  TimeOfDay _endTime = const TimeOfDay(hour: 11, minute: 0);
  int _capacity = 1;

  @override
  void initState() {
    super.initState();
    _capacity = widget.defaultCapacity;
  }

  Future<void> _selectTime(bool isStart) async {
    final picked = await showTimePicker(
      context: context,
      initialTime: isStart ? _startTime : _endTime,
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: const ColorScheme.light(
              primary: Color(0xFF8E1728),
              onPrimary: Colors.white,
            ),
          ),
          child: child!,
        );
      },
    );

    if (picked != null) {
      setState(() {
        if (isStart) {
          _startTime = picked;
          // 開始時刻が終了時刻より後の場合、終了時刻を1時間後に設定
          final startMinutes = _startTime.hour * 60 + _startTime.minute;
          final endMinutes = _endTime.hour * 60 + _endTime.minute;
          if (startMinutes >= endMinutes) {
            _endTime = TimeOfDay(
              hour: (_startTime.hour + 1) % 24,
              minute: _startTime.minute,
            );
          }
        } else {
          _endTime = picked;
        }
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('${widget.date.year}/${widget.date.month}/${widget.date.day}の時間枠'),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Row(
            children: [
              Expanded(
                child: InkWell(
                  onTap: () => _selectTime(true),
                  child: InputDecorator(
                    decoration: const InputDecoration(
                      labelText: '開始時刻',
                      border: OutlineInputBorder(),
                    ),
                    child: Text(
                      '${_startTime.hour.toString().padLeft(2, '0')}:${_startTime.minute.toString().padLeft(2, '0')}',
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: InkWell(
                  onTap: () => _selectTime(false),
                  child: InputDecorator(
                    decoration: const InputDecoration(
                      labelText: '終了時刻',
                      border: OutlineInputBorder(),
                    ),
                    child: Text(
                      '${_endTime.hour.toString().padLeft(2, '0')}:${_endTime.minute.toString().padLeft(2, '0')}',
                    ),
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          TextField(
            keyboardType: TextInputType.number,
            decoration: const InputDecoration(
              labelText: '同時実験可能人数',
              border: OutlineInputBorder(),
              suffixText: '名',
            ),
            controller: TextEditingController(text: _capacity.toString()),
            onChanged: (value) {
              _capacity = int.tryParse(value) ?? 1;
            },
          ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('キャンセル'),
        ),
        ElevatedButton(
          onPressed: () {
            // 時間の妥当性チェック
            final startMinutes = _startTime.hour * 60 + _startTime.minute;
            final endMinutes = _endTime.hour * 60 + _endTime.minute;
            
            if (startMinutes >= endMinutes) {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('終了時刻は開始時刻より後に設定してください'),
                  backgroundColor: Colors.red,
                ),
              );
              return;
            }
            
            Navigator.pop(context, DateTimeSlot(
              date: widget.date,
              startTime: _startTime,
              endTime: _endTime,
              maxCapacity: _capacity,
            ));
          },
          style: ElevatedButton.styleFrom(
            backgroundColor: const Color(0xFF8E1728),
          ),
          child: const Text('追加'),
        ),
      ],
    );
  }
}