rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection - users can read all profiles, write only their own
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // Experiments collection - all authenticated users can read, only creators can write
    match /experiments/{experimentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        request.auth.uid == resource.data.creatorId;
    }
    
    // Conversations collection - users can only access conversations they're part of
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participantIds;
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participantIds &&
        request.resource.data.participantIds.size() == 2;
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participantIds;
      allow delete: if false; // Conversations should not be deleted
    }
    
    // Messages collection - users can read/write messages in their conversations
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId);
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.senderId &&
        request.resource.data.senderId != null &&
        request.resource.data.receiverId != null &&
        request.resource.data.conversationId != null &&
        request.resource.data.content != null;
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.receiverId &&
        // Only allow updating isRead field
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      allow delete: if false; // Messages should not be deleted
    }
    
    // Allow reading and writing to any other collections for authenticated users (for future collections)
    match /{document=**} {
      allow read, write: if false; // Default deny for any other collections
    }
  }
}