rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection - users can read all profiles, write their own or update for participation
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      // Allow update if owner or any authenticated user (for updating participatedExperiments)
      allow update: if isAuthenticated();
      allow delete: if isOwner(userId);
    }
    
    // Experiments collection - all authenticated users can read and update (for participation)
    match /experiments/{experimentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      // Allow any authenticated user to update (for joining experiments)
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.creatorId;
    }
    
    // Conversations collection - users can only access conversations they're part of
    match /conversations/{conversationId} {
      // Allow reading a specific conversation if user is a participant
      allow get: if isAuthenticated() && 
        request.auth.uid in resource.data.participantIds;
      // Allow listing conversations - the query itself will filter by participantIds
      // This is necessary for checking if a conversation exists between two users
      allow list: if isAuthenticated();
      // Allow creating new conversations if user is one of the participants
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participantIds &&
        request.resource.data.participantIds.size() == 2;
      // Allow updating conversations if user is a participant
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participantIds;
      allow delete: if false; // Conversations should not be deleted
    }
    
    // Messages collection - users can read/write messages in their conversations
    match /messages/{messageId} {
      // Split read into get and list for better control
      allow get: if isAuthenticated() && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId);
      // Allow listing messages - authenticated users can query messages
      // The actual filtering happens in the query (conversationId filter)
      allow list: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.senderId &&
        request.resource.data.senderId != null &&
        request.resource.data.receiverId != null &&
        request.resource.data.conversationId != null &&
        request.resource.data.content != null;
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.receiverId &&
        // Only allow updating isRead field
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      allow delete: if false; // Messages should not be deleted
    }
    
    // Evaluations collection - 実験評価
    match /evaluations/{evaluationId} {
      // 評価の読み取り - 認証済みユーザーのみ
      allow read: if isAuthenticated();
      
      // 評価の作成 - 実験の参加者または作成者のみ
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.evaluatorId &&
        // 自分自身を評価できない
        request.resource.data.evaluatorId != request.resource.data.evaluatedUserId &&
        // 必須フィールドの存在チェック
        request.resource.data.experimentId != null &&
        request.resource.data.type != null &&
        request.resource.data.evaluatorRole != null;
      
      // 評価の更新・削除は不可（一度評価したら変更不可）
      allow update, delete: if false;
    }
    
    // Experiment slots collection - 実験の予約枠
    match /experiment_slots/{slotId} {
      // 認証済みユーザーは読み取り可能
      allow read: if isAuthenticated();
      
      // 実験作成者のみ作成・更新・削除可能
      // （実際には実験作成時に自動生成されるため、通常はサービス経由で作成）
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
    
    // Experiment reservations collection - 実験予約
    match /experiment_reservations/{reservationId} {
      // 認証済みユーザーは読み取り可能
      allow read: if isAuthenticated();
      
      // 認証済みユーザーは予約を作成可能
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.userId;
      
      // 予約者本人または実験作成者が更新可能
      allow update: if isAuthenticated() &&
        (request.auth.uid == resource.data.userId ||
         request.auth.uid == resource.data.experimentCreatorId);
      
      // 予約者本人または実験作成者が削除可能
      allow delete: if isAuthenticated() &&
        (request.auth.uid == resource.data.userId ||
         request.auth.uid == resource.data.experimentCreatorId);
    }
    
    // Allow reading and writing to any other collections for authenticated users (for future collections)
    match /{document=**} {
      allow read, write: if false; // Default deny for any other collections
    }
  }
}