rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Admins collection - secure access with proper permissions
    match /admins/{adminId} {
      // Allow users to check their own admin status
      allow get: if isAuthenticated() && request.auth.uid == adminId;
      // Allow admins to list all admin documents
      allow list: if isAdmin();
      // Allow admins to update their own lastLoginAt field
      allow update: if isAuthenticated() && 
        request.auth.uid == adminId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastLoginAt']);
      // No create or delete allowed from client (use Admin SDK)
      allow create, delete: if false;
    }
    
    // Admin logs collection - secure logging with admin-only access
    match /admin_logs/{logId} {
      // Only admins can read logs
      allow read: if isAdmin();
      // Only admins can create logs
      allow create: if isAdmin();
      // Logs are immutable - no updates or deletes
      allow update, delete: if false;
    }
    
    // Announcements collection - admins can read/write, users can read
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Users collection - users can read all profiles, write their own or update for participation
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      // Allow update if owner or any authenticated user (for updating participatedExperiments)
      allow update: if isAuthenticated();
      allow delete: if isOwner(userId);
    }
    
    // Experiments collection - all authenticated users can read and update (for participation)
    match /experiments/{experimentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      // Allow any authenticated user to update (for joining experiments)
      allow update: if isAuthenticated();
      // Allow delete if creator or admin
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.creatorId || isAdmin());
    }
    
    // Conversations collection - users can only access conversations they're part of
    match /conversations/{conversationId} {
      // Allow reading a specific conversation if user is a participant or it's a support conversation
      allow get: if isAuthenticated() && 
        (request.auth.uid in resource.data.participantIds ||
         'support_team' in resource.data.participantIds);
      // Allow listing conversations - the query itself will filter by participantIds
      // This is necessary for checking if a conversation exists between two users
      allow list: if isAuthenticated();
      // Allow creating new conversations if user is one of the participants or creating support conversation
      allow create: if isAuthenticated() && 
        (request.auth.uid in request.resource.data.participantIds ||
         'support_team' in request.resource.data.participantIds) &&
        request.resource.data.participantIds.size() == 2;
      // Allow updating conversations if user is a participant or it's a support conversation
      allow update: if isAuthenticated() && 
        (request.auth.uid in resource.data.participantIds ||
         'support_team' in resource.data.participantIds);
      allow delete: if false; // Conversations should not be deleted
    }
    
    // Messages collection - users can read/write messages in their conversations
    match /messages/{messageId} {
      // Split read into get and list for better control
      allow get: if isAuthenticated() && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId ||
         resource.data.senderId == 'support_team' ||
         resource.data.receiverId == 'support_team');
      // Allow listing messages - authenticated users can query messages
      // The actual filtering happens in the query (conversationId filter)
      allow list: if isAuthenticated();
      // Allow create for regular messages and support messages
      allow create: if isAuthenticated() && 
        ((request.auth.uid == request.resource.data.senderId) ||
         (request.resource.data.receiverId == 'support_team') ||
         (request.resource.data.senderId == 'support_team' && isAdmin())) &&
        request.resource.data.senderId != null &&
        request.resource.data.receiverId != null &&
        request.resource.data.conversationId != null &&
        request.resource.data.content != null;
      // Allow update for isRead field
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.receiverId ||
         resource.data.receiverId == 'support_team' ||
         resource.data.senderId == 'support_team') &&
        // Only allow updating isRead field
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      allow delete: if false; // Messages should not be deleted
    }
    
    // Evaluations collection - 実験評価
    match /evaluations/{evaluationId} {
      // 評価の読み取り - 認証済みユーザーのみ
      allow read: if isAuthenticated();
      
      // 評価の作成 - 実験の参加者または作成者のみ
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.evaluatorId &&
        // 自分自身を評価できない
        request.resource.data.evaluatorId != request.resource.data.evaluatedUserId &&
        // 必須フィールドの存在チェック
        request.resource.data.experimentId != null &&
        request.resource.data.type != null &&
        request.resource.data.evaluatorRole != null;
      
      // 評価の更新・削除は不可（一度評価したら変更不可）
      allow update, delete: if false;
    }
    
    // Experiment slots collection - 実験の予約枠
    match /experiment_slots/{slotId} {
      // 認証済みユーザーは読み取り可能
      allow read: if isAuthenticated();
      
      // 認証済みユーザーは作成・更新可能
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      // 認証済みユーザーまたは管理者は削除可能
      allow delete: if isAuthenticated() || isAdmin();
    }
    
    // Experiment reservations collection - 実験予約
    match /experiment_reservations/{reservationId} {
      // 認証済みユーザーは読み取り可能
      allow read: if isAuthenticated();
      
      // 認証済みユーザーは予約を作成可能
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.userId;
      
      // 予約者本人または実験作成者が更新可能
      allow update: if isAuthenticated() &&
        (request.auth.uid == resource.data.userId ||
         request.auth.uid == resource.data.experimentCreatorId);
      
      // 予約者本人または実験作成者が削除可能
      allow delete: if isAuthenticated() &&
        (request.auth.uid == resource.data.userId ||
         request.auth.uid == resource.data.experimentCreatorId);
    }
    
    // Notifications collection - 通知
    match /notifications/{notificationId} {
      // ユーザーは自分の通知のみ読み取り可能
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      // リスト操作（クエリ）も自分の通知のみ
      allow list: if isAuthenticated();
      
      // システムからの通知作成を許可（任意の認証済みユーザーが他のユーザーに通知を送信可能）
      allow create: if isAuthenticated();
      
      // ユーザーは自分の通知のみ更新可能（既読フラグの更新など）
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      // ユーザーは自分の通知のみ削除可能
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    // Support tickets collection - サポートチケット
    match /support_tickets/{ticketId} {
      // ユーザーは自分のチケットのみ読み取り可能、管理者はすべて読み取り可能
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      
      // リスト操作は管理者のみ（ユーザーは個別取得のみ）
      allow list: if isAdmin();
      
      // 認証済みユーザーはチケットを作成可能
      allow create: if isAuthenticated();
      
      // チケットの更新は管理者またはチケット所有者
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      
      // 削除は不可
      allow delete: if false;
    }
    
    // Support messages collection - サポートメッセージ
    match /support_messages/{messageId} {
      // メッセージの読み取りは関連するチケットの関係者のみ
      allow read: if isAuthenticated() && isAdmin();
      
      // リスト操作も管理者のみ
      allow list: if isAuthenticated();
      
      // メッセージの作成は認証済みユーザー
      allow create: if isAuthenticated();
      
      // メッセージの更新（既読フラグなど）
      allow update: if isAuthenticated();
      
      // 削除は不可
      allow delete: if false;
    }
    
    // Admin-specific collections that require admin access
    match /admin_activity/{activityId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    
    // Allow reading and writing to any other collections for authenticated users (for future collections)
    match /{document=**} {
      allow read, write: if false; // Default deny for any other collections
    }
  }
}